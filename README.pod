=encoding utf-8

=head1 NAME

vfnmkmc - a relatively simple Makefile generator

=head1 SYNOPSIS

B<vfnmkmc> [ B<-f> I<file> ] [ B<-d> I<dir> ] [ options ]

B<vfnmkmc> B<--version>

=head1 DESCRIPTION

This is a modified version of vfnmake that works together with mc. vfnmkmc works on fire-and-forget basis with as few configuration as possible. It does not try to compete with CMake or Autotools (yet ;) ). I wrote it because writing Makefiles, while not difficult, can be really tedious even for the simple projects. Some features may seem strange but keep in mind that I write it mostly for myself.

To enable linking with Assembly, use B<--asm32>/B<--asm64> options.

Qt4 is kind of supported (B<--qt> option) but you have to rename your headers that use QObject so they will end with I<_qt.hpp>.

For the complete list of arguments, see below.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Display the brief version of this help.

=item B<--man>

Display the full version of this help.

=item B<--name> I<name>

Specify the name of the executable file. Default: a.out

=item B<--src> I<dir>

Specify the directory with the source. Default: src/ or ./

=item B<--objs> I<dir>

Specify the directory for the *.o files. Default: objs/

=item B<--bin> I<dir>

Specify the directory for the executable file. Default: ./

=item B<-c> I<flag>, B<--cflag> I<flag>         (add)

=item B<-C> I<flag>, B<--Cflag> I<flag>         (remove)

Add/remove a compilation flag.

=item B<--cflags> I<comma_separated_list_of_flags>

Overwrite the previous cflags.

=item B<-O> I<n>

Set the optimization level.

=item B<-l> I<library>, B<--lib> I<library>     (add)

=item B<-L> I<library>, B<--Lib> I<library>     (remove)

Add/remove a library to link.

=item B<--libs> I<comma_separated_list_of_libraries>

Overwrite the previous libraries.

=item B<-p> I<package>, B<--pkg> I<package>             (add)

=item B<-P> I<package>, B<--Pkg> I<package>             (remove)

Add/remove a package for pkg-config.

=item B<--pkgs> I<comma_separated_list_of_packages>

Overwrite the previous packages.

=item B<--lflag> I<flag>        (add)

=item B<--Lflag> I<flag>        (remove)

Add/remove a linker flag.

=item B<--lflags> I<comma_separated_list_of_flags>

Overwrite the previous lflags.

=item B<--noe>, B<--no-echo>

=item S<   B<-e>>,    B<--echo>

Print the executed commands or not. Default: --no-echo

=item B<--no-std>

=item B<  --std> I<standard>

Set language standard (-std compiler flag, see your compiler's manpage for list of available options).

=item S<   B<--c99>>

Use C99 standard (alias to --std=c99).

=item S<   B<--c11>>

Use C11 standard (alias to --std=c11).

=item S<   B<--cpp0x>>

(deprecated) Use C++11 standard (alias to --std=c++11).

=item S<   B<--cpp11>>

Use C++11 standard (alias to --std=c++11).

=item S<   B<--cpp1y>>

Use C++1y standard (alias to --std=c++1y).

=item B<--no-asm32>

=item S<   B<--asm32>>

Enable 32-bit Assembly support (only nasm). Default: --no-asm

=item B<--no-asm64>

=item S<   B<--asm64>>

Enable 64-bit Assembly support (only nasm). Default: --no-asm64

=item B<--no-asm>

=item S<   B<--asm>>

alias to --asm32

=item B<--no-qt>

=item S<   B<--qt>>

Enable Qt4 meta-object support for files named *_qt.hpp and add some useful flags. Default: --no-qt

=item B<-v>, B<--verbose>

Do print the config variables.

=item B<--stdout>

Print the Makefile to the stdout instead of saving in the file so it can be piped directly to make ("vfnmkmc --stdout | make -f -").

=item B<-f> I<file>, B<--file> I<file>

Use I<file> instead of vfnmkmc.conf as the config file. Default: vfnmkmc.conf

=item B<-d> I<dir>, B<--chdir> I<dir>

Use I<dir> as the working directory.

=item B<-r>, B<--run>

Run make automatically. It can do various other things depending on the times it is specified:

-r - just run make

-rr - run make and then the compiled program

-rrr - run make clean and make

-rrrr - run make clean, make, and the compiled program

You can specify the arguments for make after "--" to override this behavior.

=item B<-g>, B<--force-generate>

Generate the Makefile even if there are no C/C++ files (used mainly with vfnmkmc.begin/end).

=item B<--no-legacy>

=item S<   B<--legacy>>

Enable/disable compatibility mode with the older versions of GNU Make and older software in general. It effectively disables debugging options and explicitly uses gcc/g++.

=item B<--configure>

Generates the configure.pl script. To be specific, it just copies itself to the current directory.

=back

=head1 MAKE TARGETS

=over 12

=item I<all>

default options

=item I<debug (d)>

compile with -g3 flag, O0 optimization and DEBUG macro

=item I<clean (c)>

delete all compilation results

=item I<fresh (f)>

force full recompilation (equivalent of 'make clean && make')

=item I<run (r)>

compile and run

=back

=head1 THE CONFIG FILES

The config files are read from F</etc/vfnmkmc.conf>, F<~/.vfnmkmc.conf> and F<vfnmkmc.conf> in that order. The F<vfnmkmc.conf> in the working directory is automatically modified on each run. Additionaly there are two other files - F<vfnmkmc.begin> and F<vfnmkmc.end>. Their role is described below.

=head2 vfnmkmc.conf syntax

    #version:           version
    libs:               lib1 lib2 ...
    pkgs:               pkg1 pkg2 ...
    O:                  0|1|2|3|s
    std:                c99|c++11|...
    cflags:             flag1 flag2 ...
    debug_cflags:       flag1 flag2 ...
    lflags:             flag1 flag2 ...
    name:               name
    src_directory:      dir
    bin_directory:      dir
    objs_directory:     dir
    echo:               0|1
    asm:                0|32|64
    qt:                 0|1

To use the default value, leave the field empty.

Currently there is no way to set custom "debug_cflags" without modifying the config file manually.

=head2 vfnmkmc.begin

Whatever is in this file, will be in the Makefile right after the initialization of the variables. Can be used to override the variables or the default target.

=head2 vfnmkmc.end

Just like F<vfnmkmc.begin> but is put at the end of the Makefile. Can be used to add some custom targets without affecting the default one.

=head1 EXAMPLES

To generate a Makefile for a program not using any external libraries with no compilation flags just type:

S<        B<vfnmkmc>>

You can add B<-r> to turn vfnmkmc into the automagic make - it will run the generated Makefile afterwards:

S<        B<vfnmkmc -r>>

You can specify the make target (for example I<debug>) for the B<-r> flag in the following way (note the space after "--"!):

S<        B<vfnmkmc -r -- debug>>

If you need to link the ncurses library and want to use the -Wall flag, use this:

S<        B<vfnmkmc --lib=ncurses --cflag=-Wall>>

=head1 2.0.0 CHANGES

B<IMPORTANT:>

B<THE CONFIG FILES FROM 1.2.0 ARE *NOT* COMPATIBLE>

=head2 Removed features

=over 4

=item * the compiler is not selected by vfnmkmc; use "export CC=your_C_compiler" and "export CXX=your_C++_compiler" before running make

=item * CXXFLAGS; CFLAGS are used for both C and C++

=back

=head2 Added features

=over 4

=item * THE GLORIOUS RETURN OF SIMPLICITY!!!

=back

If you do need any of the removed features, email me, I'll see what I can do.

=head1 AUTHOR

vfnmake was written by Wojciech 'vifon' Siewierski <darkvifon at gmail dot com>.
This is a slightly modified version for use by the c++ managing program mc.

=head1 ACKNOWLEDGEMENTS

Thanks to Tadeusz So≈õnierz for some advices and fixes, Maciej Grzybek for some ideas and Mateusz Makowski for bug reports.

=head1 SEE ALSO

B<make>(1)

=head1 COPYRIGHT

Copyright (C) 2011-2013  Wojciech Siewierski, Aleksander Nitecki

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
